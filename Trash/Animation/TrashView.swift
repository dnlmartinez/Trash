//
// TrashView.swift
// Generated by Core Animator version 0.8 on 11/19/14.
//
// DO NOT MODIFY THIS FILE. IT IS AUTO-GENERATED AND WILL BE OVERWRITTEN
//

import UIKit

@IBDesignable
class TrashView : UIView {


	var animationCompletions = Dictionary<CAAnimation, (Bool) -> Void>()
	var viewsByName: [String : UIView]!

	// - MARK: Life Cycle

	convenience init() {
		self.init(frame: CGRect(x: 0, y: 0, width: 124, height: 140))
	}

	override init(frame: CGRect) {
		super.init(frame: frame)
		self.setupHierarchy()
	}

	required init(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)!
		self.setupHierarchy()
	}

	// - MARK: Scaling

	override func layoutSubviews() {
		super.layoutSubviews()

		if let scalingView = self.viewsByName["__scaling__"] {
			var xScale = self.bounds.size.width / scalingView.bounds.size.width
			var yScale = self.bounds.size.height / scalingView.bounds.size.height
			switch contentMode {
			case .scaleToFill:
				break
			case .scaleAspectFill:
				let scale = max(xScale, yScale)
				xScale = scale
				yScale = scale
			default:
				let scale = min(xScale, yScale)
				xScale = scale
				yScale = scale
			}
			scalingView.transform = CGAffineTransform(scaleX: xScale, y: yScale)
			scalingView.center = CGPoint(x:self.bounds.midX, y:self.bounds.midY)
		}
	}

	// - MARK: Setup

	func setupHierarchy()
    {
        
		var viewsByName: [String : UIView] = [:]
		let bundle = Bundle.init(for:type(of: self))
		let __scaling__ = UIView()
		__scaling__.bounds = CGRect(x:0, y:0, width:124, height:140)
		__scaling__.center = CGPoint(x:62.3, y:70.0)
		self.addSubview(__scaling__)
		viewsByName["__scaling__"] = __scaling__

		let trash = UIView()
		trash.bounds = CGRect(x:0, y:0, width:93.0, height:131.0)
		trash.center = CGPoint(x:62.275, y:74.500)
		__scaling__.addSubview(trash)
		viewsByName["trash"] = trash

		let trashcan = UIImageView()
		trashcan.bounds = CGRect(x:0, y:0, width:82.0, height:110.0)
		trashcan.layer.anchorPoint = CGPoint(x:0.500, y:0.991)
		var imgTrash: UIImage!
		if let imagePath = bundle.path(forResource: "trash.png", ofType:nil) {
			imgTrash = UIImage(contentsOfFile:imagePath)
		}
		trashcan.image = imgTrash
		trashcan.layer.position = CGPoint(x:46.495, y:130.000)
		trash.addSubview(trashcan)
		viewsByName["trashcan"] = trashcan

		let trashlid = UIImageView()
		trashlid.bounds = CGRect(x:0, y:0, width:93.0, height:18.0)
		trashlid.layer.anchorPoint = CGPoint(x:0.037, y:0.889)
		var imgTrashlid: UIImage!
		if let imagePath = bundle.path(forResource: "trashlid.png", ofType:nil) {
			imgTrashlid = UIImage(contentsOfFile:imagePath)
		}
		trashlid.image = imgTrashlid
		trashlid.layer.position = CGPoint(x:3.473, y:16.000)
		trash.addSubview(trashlid)
		viewsByName["trashlid"] = trashlid

		self.viewsByName = viewsByName
	}

	// - MARK: close

	func addCloseAnimation() {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCloseAnimation(_ completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCloseAnimation(removedOnCompletion: Bool) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCloseAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCloseAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCloseAnimationWithBeginTime(_ beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.00, 0.00)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.250
			representativeAnimation.delegate = self as! CAAnimationDelegate
			self.layer.add(representativeAnimation, forKey: "Close")
			self.animationCompletions[layer.animation(forKey: "Close")!] = complete
		}

		let trashScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		trashScaleXAnimation.duration = 0.250
		trashScaleXAnimation.values = [1.080 as Float, 1.000 as Float]
		trashScaleXAnimation.keyTimes = [0.000, 1.000]
		trashScaleXAnimation.timingFunctions = [linearTiming]
		trashScaleXAnimation.beginTime = beginTime
		trashScaleXAnimation.fillMode = fillMode
		trashScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashScaleXAnimation, forKey:"close_ScaleX")

		let trashScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		trashScaleYAnimation.duration = 0.250
		trashScaleYAnimation.values = [1.080 as Float, 1.000 as Float]
		trashScaleYAnimation.keyTimes = [0.000 , 1.000 ]
		trashScaleYAnimation.timingFunctions = [linearTiming]
		trashScaleYAnimation.beginTime = beginTime
		trashScaleYAnimation.fillMode = fillMode
		trashScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashScaleYAnimation, forKey:"close_ScaleY")

		let trashlidRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		trashlidRotationAnimation.duration = 0.250
		trashlidRotationAnimation.values = [-0.995 as Float, -0.000 as Float, -0.000 as Float]
		trashlidRotationAnimation.keyTimes = [0.000 , 0.800 , 1.000]
		trashlidRotationAnimation.timingFunctions = [anticOverTiming, linearTiming]
		trashlidRotationAnimation.beginTime = beginTime
		trashlidRotationAnimation.fillMode = fillMode
		trashlidRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trashlid"]?.layer.add(trashlidRotationAnimation, forKey:"close_Rotation")
	}

	func removeCloseAnimation() {
		self.layer.removeAnimation(forKey: "Close")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close_ScaleX")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close_ScaleY")
		self.viewsByName["trashlid"]?.layer.removeAnimation(forKey: "close_Rotation")
	}

	// - MARK: close and shake

	func addCloseAndShakeAnimation() {
		addCloseAndShakeAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addCloseAndShakeAnimation(_ completion: ((Bool) -> Void)?) {
		addCloseAndShakeAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addCloseAndShakeAnimation(removedOnCompletion: Bool) {
		addCloseAndShakeAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addCloseAndShakeAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addCloseAndShakeAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addCloseAndShakeAnimationWithBeginTime(_ beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.00, 0.00)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.300
			representativeAnimation.delegate = self as? CAAnimationDelegate
			self.layer.add(representativeAnimation, forKey: "CloseAndShake")
			self.animationCompletions[layer.animation(forKey: "CloseAndShake")!] = complete
		}

		let trashRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		trashRotationAnimation.duration = 0.300
		trashRotationAnimation.values = [0.000 as Float, -0.065 as Float, 0.066 as Float, -0.048 as Float, 0.004 as Float]
		trashRotationAnimation.keyTimes = [0.000 , 0.333 , 0.500 , 0.833 , 1.000 ]
        
		trashRotationAnimation.timingFunctions = [linearTiming, linearTiming, linearTiming, linearTiming]
		trashRotationAnimation.beginTime = beginTime
		trashRotationAnimation.fillMode = fillMode
		trashRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashRotationAnimation, forKey:"close and shake_Rotation")

		let trashScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		trashScaleXAnimation.duration = 0.300
		trashScaleXAnimation.values = [1.080 as Float, 1.000 as Float, 1.000 as Float]
		trashScaleXAnimation.keyTimes = [0.000 , 0.417, 1.000 ]
		trashScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		trashScaleXAnimation.beginTime = beginTime
		trashScaleXAnimation.fillMode = fillMode
		trashScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashScaleXAnimation, forKey:"close and shake_ScaleX")

		let trashScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		trashScaleYAnimation.duration = 0.300
		trashScaleYAnimation.values = [1.080 as Float, 1.000 as Float, 1.000 as Float]
		trashScaleYAnimation.keyTimes = [0.000, 0.417 , 1.000 ]
		trashScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		trashScaleYAnimation.beginTime = beginTime
		trashScaleYAnimation.fillMode = fillMode
		trashScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashScaleYAnimation, forKey:"close and shake_ScaleY")

		let trashTranslationXAnimation = CAKeyframeAnimation(keyPath: "transform.translation.x")
		trashTranslationXAnimation.duration = 0.300
		trashTranslationXAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
		trashTranslationXAnimation.keyTimes = [0.000 , 0.417 , 1.000 ]
		trashTranslationXAnimation.timingFunctions = [linearTiming, linearTiming]
		trashTranslationXAnimation.beginTime = beginTime
		trashTranslationXAnimation.fillMode = fillMode
		trashTranslationXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashTranslationXAnimation, forKey:"close and shake_TranslationX")

		let trashTranslationYAnimation = CAKeyframeAnimation(keyPath: "transform.translation.y")
		trashTranslationYAnimation.duration = 0.300
		trashTranslationYAnimation.values = [0.000 as Float, 0.000 as Float, 0.000 as Float]
		trashTranslationYAnimation.keyTimes = [0.000 , 0.417 , 1.000 ]
		trashTranslationYAnimation.timingFunctions = [linearTiming, linearTiming]
		trashTranslationYAnimation.beginTime = beginTime
		trashTranslationYAnimation.fillMode = fillMode
		trashTranslationYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashTranslationYAnimation, forKey:"close and shake_TranslationY")

		let trashlidRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		trashlidRotationAnimation.duration = 0.300
		trashlidRotationAnimation.values = [-0.995 as Float, -0.000 as Float, -0.000 as Float]
		trashlidRotationAnimation.keyTimes = [0.000 , 0.667 , 1.000 ]
		trashlidRotationAnimation.timingFunctions = [anticOverTiming, linearTiming]
		trashlidRotationAnimation.beginTime = beginTime
		trashlidRotationAnimation.fillMode = fillMode
		trashlidRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trashlid"]?.layer.add(trashlidRotationAnimation, forKey:"close and shake_Rotation")
	}

	func removeCloseAndShakeAnimation() {
		self.layer.removeAnimation(forKey: "CloseAndShake")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close and shake_Rotation")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close and shake_ScaleX")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close and shake_ScaleY")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close and shake_TranslationX")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "close and shake_TranslationY")
		self.viewsByName["trashlid"]?.layer.removeAnimation(forKey: "close and shake_Rotation")
	}

	// - MARK: open

	func addOpenAnimation() {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: nil)
	}

	func addOpenAnimation(_ completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: kCAFillModeBoth, removedOnCompletion: false, completion: completion)
	}

	func addOpenAnimation(removedOnCompletion: Bool) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: nil)
	}

	func addOpenAnimation(removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		addOpenAnimationWithBeginTime(0, fillMode: removedOnCompletion ? kCAFillModeRemoved : kCAFillModeBoth, removedOnCompletion: removedOnCompletion, completion: completion)
	}

	func addOpenAnimationWithBeginTime(_ beginTime: CFTimeInterval, fillMode: String, removedOnCompletion: Bool, completion: ((Bool) -> Void)?) {
		let linearTiming = CAMediaTimingFunction(name: kCAMediaTimingFunctionLinear)
		let anticOverTiming = CAMediaTimingFunction(controlPoints: 0.00, 0.00, 0.00, 0.00)
		if let complete = completion {
			let representativeAnimation = CABasicAnimation(keyPath: "not.a.real.key")
			representativeAnimation.duration = 0.500
			representativeAnimation.delegate = self as! CAAnimationDelegate
			self.layer.add(representativeAnimation, forKey: "Open")
			self.animationCompletions[layer.animation(forKey: "Open")!] = complete
		}

		let trashScaleXAnimation = CAKeyframeAnimation(keyPath: "transform.scale.x")
		trashScaleXAnimation.duration = 0.500
		trashScaleXAnimation.values = [1.000 as Float, 1.080 as Float, 1.080 as Float]
		trashScaleXAnimation.keyTimes = [0.000 , 0.500 , 1.000 ]
		trashScaleXAnimation.timingFunctions = [linearTiming, linearTiming]
		trashScaleXAnimation.beginTime = beginTime
		trashScaleXAnimation.fillMode = fillMode
		trashScaleXAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashScaleXAnimation, forKey:"open_ScaleX")

		let trashScaleYAnimation = CAKeyframeAnimation(keyPath: "transform.scale.y")
		trashScaleYAnimation.duration = 0.500
		trashScaleYAnimation.values = [1.000 as Float, 1.080 as Float, 1.080 as Float]
		trashScaleYAnimation.keyTimes = [0.000, 0.500 , 1.000 ]
		trashScaleYAnimation.timingFunctions = [linearTiming, linearTiming]
		trashScaleYAnimation.beginTime = beginTime
		trashScaleYAnimation.fillMode = fillMode
		trashScaleYAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trash"]?.layer.add(trashScaleYAnimation, forKey:"open_ScaleY")

		let trashlidRotationAnimation = CAKeyframeAnimation(keyPath: "transform.rotation.z")
		trashlidRotationAnimation.duration = 0.500
		trashlidRotationAnimation.values = [0.000 as Float, -0.989 as Float]
		trashlidRotationAnimation.keyTimes = [0.000 , 1.000 ]
		trashlidRotationAnimation.timingFunctions = [anticOverTiming]
		trashlidRotationAnimation.beginTime = beginTime
		trashlidRotationAnimation.fillMode = fillMode
		trashlidRotationAnimation.isRemovedOnCompletion = removedOnCompletion
		self.viewsByName["trashlid"]?.layer.add(trashlidRotationAnimation, forKey:"open_Rotation")
	}

	func removeOpenAnimation() {
		self.layer.removeAnimation(forKey: "Open")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "open_ScaleX")
		self.viewsByName["trash"]?.layer.removeAnimation(forKey: "open_ScaleY")
		self.viewsByName["trashlid"]?.layer.removeAnimation(forKey: "open_Rotation")
	}

    
    func animationDidStop(_ anim:CAAnimation, finished flag: Bool)
    {
		if let completion = self.animationCompletions[anim]
        {
			self.animationCompletions.removeValue(forKey: anim)
			completion(flag)
		}
	}

    /*
	override func removeAllAnimations()
    {
		for subview in viewsByName.values {
			subview.layer.removeAllAnimations()
		}
		self.layer.removeAnimationForKey("Close")
		self.layer.removeAnimationForKey("CloseAndShake")
		self.layer.removeAnimationForKey("Open")
	}
    */
}
